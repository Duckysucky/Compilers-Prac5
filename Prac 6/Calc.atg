using Library;

COMPILER Calc $NC
//  Put your names and a description here

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .

TOKENS
  number     = digit { digit } .
  identifier = letter { letter | digit } .

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Calc                                (. bool calConst; .)
  =
  { Print<out calConst>
  | Assignment<out calConst>
  } "quit"
  .

  Assignment<out bool AssignConst>    (. bool AssignAlsoConst; .)
  =
  Variable                            (. AssignConst = false; .)
  "="
  Expression<out AssignAlsoConst>     (. AssignConst = AssignConst && AssignAlsoConst; .)
  SYNC ";"
  .

  Print<out bool printConst>          (. bool printAlsoConst; .)
  =
  "print"
  Expression<out printConst>
  { WEAK ","
    Expression<out printAlsoConst>    (. printConst = printConst && printAlsoConst; .)
  }
  SYNC ";"
  .

  Expression<out bool ExprConst>      (. bool ExprAlsoConst; .)
  =
  AndExp<out ExprConst>
  { "||"
    AndExp<out ExprAlsoConst>         (. ExprConst = ExprConst && ExprAlsoConst; .)
  } .

  AndExp<out bool andExpConst>        (. bool andExpAlsoConst; .)
  =
  EqlExp<out andExpConst>
  { "&&"
    EqlExp<out andExpAlsoConst>       (. andExpConst = andExpConst && andExpAlsoConst; .)
  } .

  EqlExp<out bool equalExpConst>      (. bool equalExpAlsoConst; .)
  =
  RelExp<out equalExpConst>
  { EqlOp
    RelExp<out equalExpAlsoConst>     (. equalExpConst = equalExpConst && equalExpAlsoConst; .)
  } .

  RelExp<out bool relExpConst>        (. bool relExpAlsoConst; .)
  =
  AddExp<out relExpConst>
  [ RelOp
    AddExp<out relExpAlsoConst>       (. relExpConst = relExpConst && relExpAlsoConst; .)
  ] .

  AddExp<out bool addExpConst>        (. bool addExpAlsoConst; .)
  =
  MultExp<out addExpConst>
  { AddOp
    MultExp<out addExpAlsoConst>      (. addExpConst = addExpConst && addExpAlsoConst; .)
  } .

  MultExp<out bool multConst>         (. bool multAlsoConst; .)
  =
  UnaryExp<out multConst>
  { MulOp          
    UnaryExp<out multAlsoConst>       (. multConst = multConst && multAlsoConst; .)
  } .

  UnaryExp<out bool UnaryConst>
  =   Factor<out UnaryConst>
    | "+" UnaryExp<out UnaryConst>
    | "-" UnaryExp<out UnaryConst>
    | "!" UnaryExp<out UnaryConst>
  .

  Factor<out bool factoConst>           
  =
      Variable                        (. factoConst = false; .)
    | Number                          (. factoConst = true; .)
    | "true"
    | "false"
    | "(" Expression<out factoConst>
      ")"
  .

  Variable
  =
  identifier                          
  .

  Number
  =
  number                              
  .

  MulOp
  =
      "*"
    | "/"
    | "%"
    .

  AddOp
  =
      "+"
    | "-"
  .

  RelOp
  =
      "<"
    | "<="
    | ">"
    | ">="
  .

  EqlOp
  =
      "=="
    | "!="
  .

END Calc.
