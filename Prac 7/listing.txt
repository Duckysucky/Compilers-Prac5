  Warning: FormalParameters is deletable
  Warning: Arguments is deletable

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019  */
  11 
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16 
  17   const bool
  18     known = true;
  19 
  20   static bool CheckStatementUse = false;
  21 
  22   // This next method might better be located in the code generator.  Traditionally
  23   // it has been left in the ATG file, but that might change in future years
  24   //
  25   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  26   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  27   // to know this!
  28 
  29   static string Unescape(string s) {
  30   /* Replaces escape sequences in s by their Unicode values */
  31     StringBuilder buf = new StringBuilder();
  32     int i = 0;
  33     while (i < s.Length) {
  34       if (s[i] == '\\') {
  35         switch (s[i+1]) {
  36           case '\\': buf.Append('\\'); break;
  37           case '\'': buf.Append('\''); break;
  38           case '\"': buf.Append('\"'); break;
  39           case  'r': buf.Append('\r'); break;
  40           case  'n': buf.Append('\n'); break;
  41           case  't': buf.Append('\t'); break;
  42           case  'b': buf.Append('\b'); break;
  43           case  'f': buf.Append('\f'); break;
  44           default:   buf.Append(s[i+1]); break;
  45         }
  46         i += 2;
  47       }
  48       else {
  49         buf.Append(s[i]);
  50         i++;
  51       }
  52     }
  53     return buf.ToString();
  54   } // Unescape
  55 
  56   // the following is global for expediency (fewer parameters needed)
  57 
  58   static Label mainEntryPoint = new Label(!known);
  59 
  60   static bool IsArith(int type) {
  61     return type == Types.intType || type == Types.noType;
  62   } // IsArith
  63 
  64   static bool IsBool(int type) {
  65     return type == Types.boolType || type == Types.noType;
  66   } // IsBool
  67 
  68   static bool IsArray(int type) {
  69     return (type % 2) == 1;
  70   } // IsArray
  71 
  72   static bool Compatible(int typeOne, int typeTwo) {
  73   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  74     return    typeOne == typeTwo
  75            || IsArith(typeOne) && IsArith(typeTwo)
  76            || typeOne == Types.noType
  77            || typeTwo == Types.noType
  78            || IsArray(typeOne) && typeTwo == Types.nullType
  79            || IsArray(typeTwo) && typeOne == Types.nullType;
  80   } // Compatible
  81 
  82   static bool Assignable(int typeOne, int typeTwo) {
  83   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  84     return    typeOne == typeTwo
  85            || typeOne == Types.noType
  86            || typeTwo == Types.noType
  87            || IsArray(typeOne) && typeTwo == Types.nullType;
  88   } // Assignable
  89 
  90   static bool IsCall(out DesType des) {
  91   // Used as an LL(1) conflict resolver variable/function name
  92     Entry entry = Table.Find(la.val);
  93     des = new DesType(entry);
  94     return entry.kind == Kinds.Fun;
  95   } // IsCall
  96 
  97 
  98 /* -------------------------------------------------------------------------- */
  99 
 100 CHARACTERS
 101   lf         = CHR(10) .
 102   backslash  = CHR(92) .
 103   control    = CHR(0) .. CHR(31) .
 104   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 105   digit      = "0123456789" .
 106   stringCh   = ANY - '"' - control - backslash .
 107   charCh     = ANY - "'" - control - backslash .
 108   printable  = ANY - control .
 109 
 110 TOKENS
 111   identifier = letter { { "_" } (letter | digit) } .
 112   number     = digit { digit } .
 113   stringLit  = '"' { stringCh | backslash printable } '"' .
 114   charLit    = "'" ( charCh   | backslash printable ) "'" .
 115 
 116 PRAGMAS
 117   DebugOn     = "$D+" .                      (. debug = true; .)
 118   DebugOff    = "$D-" .                      (. debug = false; .)
 119   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 120   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 121   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 122 
 123 COMMENTS FROM "//" TO lf
 124 COMMENTS FROM "/*" TO "*/"
 125 
 126 IGNORE CHR(9) .. CHR(13)
 127 
 128 PRODUCTIONS
 129 
 130   Parva
 131                              (. CodeGen.FrameHeader();
 132 					     // no arguments
 133                                 CodeGen.Call(mainEntryPoint);
 134 						// forward, incomplete
 135                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 136   = {   FuncDeclaration } EOF  (. if 
 137 						(!mainEntryPoint.IsDefined())
 138                          SemError("missing Main function"); .)
 139   .
 140 
 141   FuncDeclaration
 142                        (. StackFrame frame = new StackFrame();
 143                           Entry function = new Entry(); .)
 144   =  "void" Ident<out function.name>  
 145 					(. function.kind = Kinds.Fun;
 146                               function.type = Types.voidType;
 147                               function.nParams = 0;
 148                               function.firstParam = null;
 149 	                  function.entryPoint = new Label(known);
 150                               Table.Insert(function);
 151                               Table.OpenScope(); .)
 152      "(" FormalParameters<function> ")"      
 153 				(. frame.size = CodeGen.headerSize + 
 154 					function.nParams;
 155                    if (function.name.ToUpper().Equals("MAIN")
 156                        && !mainEntryPoint.IsDefined()
 157                        && function.nParams == 0) {
 158                            mainEntryPoint.Here(); } .)
 159      Body<frame>              (. Table.CloseScope(); .)
 160   .
 161 
 162   FormalParameters<Entry func>  (. Entry param; .)
 163   = [ OneParam<out param, func> (. func.firstParam = param; .)
 164       { WEAK "," OneParam<out param, func> }
 165     ] .
 166 
 167   OneParam<out Entry param, Entry func>
 168 					(. param = new Entry();
 169                              param.kind = Kinds.Var;
 170            param.offset = CodeGen.headerSize + func.nParams;
 171                              func.nParams++; .)
 172   =  Type<out param.type>
 173      Ident<out param.name>         (. Table.Insert(param); .)
 174   .
 175 
 176   Body<StackFrame frame>       (. Label DSPLabel = new Label(known);
 177                                                 int sizeMark = frame.size;
 178                                                 CodeGen.OpenStackFrame(0); .)
 179   =  "{" { Statement<frame> }
 180      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 181                                                 CodeGen.LeaveVoidFunction();
 182                                               .) 
 183 .
 184 
 185   Statement<StackFrame frame> 
 186   =  SYNC (   Block<frame> (. if (CheckStatementUse == false) 
 187                                                 {
 188                                                  Warning("Empty body.");
 189                                                 }
 190                                               .)
 191             | ConstDeclarations (. CheckStatementUse = true; .)
 192             | VarDeclarations<frame> (. CheckStatementUse = true; .)
 193             | AssignmentOrCall (. CheckStatementUse = true; .)
 194             | IfStatement<frame> 
 195             | WhileStatement<frame> 
 196             | HaltStatement (. CheckStatementUse = true; .)
 197             | ReturnStatement (. CheckStatementUse = true; .)
 198             | ReadStatement (. CheckStatementUse = true; .)
 199             | WriteStatement (. CheckStatementUse = true; .)
 200             | ";" (. .)
 201           ) .
 202 
 203   Block<StackFrame frame>
 204   =    (. CheckStatementUse = false; .)                                      (. Table.OpenScope(); .)
 205      "{" { Statement<frame> }                
 206      WEAK "}"                                (. Table.CloseScope(); .)
 207   .
 208 
 209   ConstDeclarations
 210   = "const" OneConst { WEAK "," OneConst }
 211     WEAK ";"
 212   .
 213 
 214   OneConst                                   (. Entry constant = new Entry();
 215                                                 ConstRec con; .)
 216   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 217      AssignOp Constant<out con>              (. constant.value = con.value;
 218                                                 constant.type = con.type;
 219                                                 Table.Insert(constant); .)
 220   .
 221 
 222   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 223   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 224     | CharConst<out con.value>               (. con.type = Types.intType; .)
 225     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 226     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 227     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 228   .
 229 
 230   VarDeclarations<StackFrame frame>          (. int type; .)
 231   =  Type<out type>                          
 232      VarList<frame, type>
 233      WEAK ";"
 234   .
 235 
 236   Type<out int type>                         
 237   =   BasicType<out type>
 238        [ "[]"                                (. type++; .)
 239        ] .
 240 
 241   BasicType<out int type>                    (. type = Types.noType; .)
 242   =   "int"                                  (. type = Types.intType; .)
 243     | "bool"                                 (. type = Types.boolType; .)
 244   .
 245 
 246 
 247   VarList<StackFrame frame, int type>
 248   =  OneVar<frame, type>
 249      { WEAK "," OneVar<frame, type> }
 250   .
 251 
 252   OneVar<StackFrame frame, int type>         (. int expType;
 253                                                 Entry var = new Entry(); .)
 254   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 255                                                 var.type = type;
 256                                                 var.offset = frame.size;
 257                                                 frame.size++; .)
 258      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 259        Expression<out expType>               (. if (!Assignable(var.type, expType))
 260                                                   SemError("incompatible types in assignment");
 261                                                 CodeGen.Assign(var.type); .)
 262      ]                                       (. Table.Insert(var); .)
 263   .
 264 
 265 
 266   AssignmentOrCall                           (. int expType;
 267                                                 DesType des; .)
 268   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 269          identifier                          (. CodeGen.FrameHeader(); .)
 270          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 271       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 272                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 273          AssignOp
 274          Expression<out expType>             (. if (!Assignable(des.type, expType))
 275                                                 SemError("incompatible types in assignment");
 276                                                 CodeGen.Assign(des.type); .)
 277      ) WEAK ";"
 278   .
 279 
 280   Arguments<DesType des>                     (. int argCount = 0;
 281                                                 Entry fp = des.entry.firstParam; .)
 282   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 283        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 284        }
 285      ]                                       (. if (argCount != des.entry.nParams)
 286                                                   SemError("wrong number of arguments"); .)
 287   .
 288 
 289   OneArg<Entry fp>                           (. int argType; .)
 290   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 291                                                     SemError("argument type mismatch"); .)
 292      )
 293   .
 294 
 295   Designator<out DesType des>                (. string name;
 296                                                 int indexType; .)
 297   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 298                                                 if (!entry.declared)
 299                                                   SemError("undeclared identifier");
 300                                                 des = new DesType(entry);
 301                                                 if (entry.kind == Kinds.Var)
 302                                                   CodeGen.LoadAddress(entry); .)
 303      [     "["                               (. if (IsArray(des.type)) des.type--;
 304                                                 else SemError("unexpected subscript");
 305                                                 if (des.entry.kind != Kinds.Var)
 306                                                   SemError("unexpected subscript");
 307                                                 CodeGen.Dereference(); .)
 308               Expression<out indexType>      (. if (!IsArith(indexType))
 309                                                   SemError("invalid subscript type");
 310                                                 CodeGen.Index(); .)
 311 
 312            "]"
 313      ]
 314   .
 315 
 316   IfStatement<StackFrame frame>
 317                                              (. Label falseLabel = new Label(!known); .)
 318   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 319         Statement<frame>           (. falseLabel.Here(); .)
 320   .
 321 
 322 
 323   WhileStatement<StackFrame frame>
 324                                              (. Label loopExit  = new Label(!known);
 325                                                 Label loopStart = new Label(known); .)
 326   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 327      Statement<frame>              	     (. if(token.val == ";")
 328                                               {
 329                                                 Warning("Can not have an empty statement.");
 330                                               }
 331                                              CodeGen.Branch(loopStart);
 332                                               loopExit.Here(); .)
 333   .
 334 
 335   HaltStatement
 336   =  "halt" ["("stringLit (. CodeGen.WriteString(token.val); .) ")"]                                 (. CodeGen.LeaveProgram();  .)
 337      WEAK ";"
 338   .
 339 
 340   ReturnStatement              
 341   =  "return"				(. CodeGen.LeaveVoidFunction(); .)
 342     WEAK ";"
 343   .
 344 
 345   ReadStatement
 346   = (   "read"     "("   ReadList   ")"
 347       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 348     )
 349     WEAK ";"
 350   .
 351 
 352   ReadList
 353   = ReadElement { WEAK "," ReadElement }
 354   .
 355 
 356   ReadElement                                (. string str;
 357                                                 DesType des; .)
 358   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 359     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 360                                                   SemError("wrong kind of identifier");
 361                                                 switch (des.type) {
 362                                                   case Types.intType:
 363                                                   case Types.boolType:
 364                                                     CodeGen.Read(des.type); break;
 365                                                   default:
 366                                                     SemError("cannot read this type"); break;
 367                                                 } .)
 368   .
 369 
 370   WriteStatement
 371   = (   "write"     "("   WriteList   ")"
 372       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 373     )
 374     WEAK ";"
 375   .
 376 
 377   WriteList
 378   = WriteElement { WEAK "," WriteElement }
 379   .
 380 
 381   WriteElement                               (. int expType;
 382                                                 string str; .)
 383   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 384     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType))
 385                                                   SemError("cannot write this type");
 386                                                 switch (expType) {
 387                                                   case Types.intType:
 388                                                   case Types.boolType:
 389                                                     CodeGen.Write(expType); break;
 390                                                   default:
 391                                                     break;
 392                                                 } .)
 393   .
 394 
 395   Condition                                  (. int type; .)
 396   =  Expression<out type>                    (. if (!IsBool(type))
 397                                                   SemError("Boolean expression needed"); .)
 398   .
 399 
 400   Expression<out int type>                   (. int type2;
 401                                                 int op;
 402                                                 bool comparable; .)
 403   =  AddExp<out type>
 404      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 405                                                   case CodeGen.ceq: case CodeGen.cne:
 406                                                     comparable = Compatible(type, type2);
 407                                                     break;
 408                                                   default:
 409                                                     comparable = IsArith(type) && IsArith(type2);
 410                                                     break;
 411                                                 }
 412                                                 if (!comparable)
 413                                                   SemError("incomparable operands");
 414                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 415      ]
 416   .
 417 
 418   AddExp<out int type>                       (. int type2;
 419                                                 int op;
 420                                                 Label shortcircuit = new Label(!known); .)
 421   =                                          (. type = Types.noType; .)
 422      (   "+" Term<out type>                  (. if (!IsArith(type))
 423                                                   SemError("arithmetic operand needed"); .)
 424        | "-" Term<out type>                  (. if (!IsArith(type))
 425                                                   SemError("arithmetic operand needed");
 426                                                 CodeGen.NegateInteger(); .)
 427        | Term<out type>
 428      )
 429      { AddOp<out op>                         (. if (op == CodeGen.or)
 430                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 431        Term<out type2>                       (. switch (op) {
 432                                                   case CodeGen.or:
 433                                                     if (!IsBool(type) || !IsBool(type2))
 434                                                       SemError("boolean operands needed");
 435                                                     type = Types.boolType;
 436                                                     break;
 437                                                   default:
 438                                                     if (!IsArith(type) || !IsArith(type2)) {
 439                                                       SemError("arithmetic operands needed");
 440                                                       type = Types.noType;
 441                                                     }
 442                                                     CodeGen.BinaryOp(op);
 443                                                     break;
 444                                                 } .)
 445      }                                       (. shortcircuit.Here(); .)
 446   .
 447 
 448   Term<out int type>                         (. int type2;
 449                                                 int op;
 450                                                 Label shortcircuit = new Label(!known); .)
 451   =  Factor<out type>
 452      { MulOp<out op>                         (. if (op == CodeGen.and)
 453                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 454        Factor<out type2>                     (. switch (op) {
 455                                                   case CodeGen.and:
 456                                                     if (!IsBool(type) || !IsBool(type2))
 457                                                       SemError("boolean operands needed");
 458                                                     type = Types.boolType;
 459                                                     break;
 460                                                   default:
 461                                                     if (!IsArith(type) || !IsArith(type2)) {
 462                                                       SemError("arithmetic operands needed");
 463                                                       type = Types.noType;
 464                                                     }
 465                                                     CodeGen.BinaryOp(op);
 466                                                     break;
 467                                                 } .)
 468      }                                       (. shortcircuit.Here(); .)
 469   .
 470 
 471   Factor<out int type>                       (. type = Types.noType;
 472                                                 int size;
 473                                                 DesType des;
 474                                                 ConstRec con; .)
 475   =    Designator<out des>                 (. type = des.type;
 476                                               switch (des.entry.kind) {
 477                                                   case Kinds.Var:
 478                                                     CodeGen.Dereference();
 479                                                     break;
 480                                                   case Kinds.Con:
 481                                                     CodeGen.LoadConstant(des.entry.value);
 482                                                     break;
 483                                                   default:
 484                                                     SemError("wrong kind of identifier");
 485                                                     break;
 486                                                 } .)
 487                                         
 488      | Constant<out con>                     (. type = con.type;
 489                                                 CodeGen.LoadConstant(con.value); .)
 490      | "new" BasicType<out type>             (. type++; .)
 491          "[" Expression<out size>            (. if (!IsArith(size))
 492                                                   SemError("array size must be integer");
 493                                                 CodeGen.Allocate(); .)
 494          "]"
 495      | "!" Factor<out type>                  (. if (!IsBool(type)) SemError("boolean operand needed");
 496                                                 else CodeGen.NegateBoolean();
 497                                                 type = Types.boolType; .)
 498      | "(" Expression<out type> ")"
 499   .
 500 
 501   AddOp<out int op>                          (. op = CodeGen.nop; .)
 502   =    "+"                                   (. op = CodeGen.add; .)
 503      | "-"                                   (. op = CodeGen.sub; .)
 504      | "||"                                  (. op = CodeGen.or;  .)
 505   .
 506 
 507   MulOp<out int op>                          (. op = CodeGen.nop; .)
 508   =    "*"                                   (. op = CodeGen.mul; .)
 509      | "/"                                   (. op = CodeGen.div; .)
 510      | "%"                                   (. op = CodeGen.rem; .)
 511      | "&&"                                  (. op = CodeGen.and; .)
 512   .
 513 
 514   RelOp<out int op>                          (. op = CodeGen.nop; .)
 515   =    "=="                                  (. op = CodeGen.ceq; .)
 516      | "!="                                  (. op = CodeGen.cne; .)
 517      | "<"                                   (. op = CodeGen.clt; .)
 518      | "<="                                  (. op = CodeGen.cle; .)
 519      | ">"                                   (. op = CodeGen.cgt; .)
 520      | ">="                                  (. op = CodeGen.cge; .)
 521   .
 522 
 523   AssignOp = "=" .
 524 
 525   Ident<out string name>
 526   =  identifier                              (. name = token.val; .)
 527   .
 528 
 529   StringConst<out string str>
 530   =  stringLit                               (. str = token.val;
 531                                                 str = Unescape(str.Substring(1, str.Length - 2)); .)
 532   .
 533 
 534   CharConst<out int value>
 535   =  charLit                                 (. string str = token.val;
 536                                                 str = Unescape(str.Substring(1, str.Length - 2));
 537                                                 value = str[0]; .)
 538   .
 539 
 540   IntConst<out int value>
 541   =  number                                  (. try {
 542                                                   value = Convert.ToInt32(token.val);
 543                                                 } catch (Exception) {
 544                                                   value = 0; SemError("number out of range");
 545                                                 } .)
 546   .
 547 
 548 END Parva.
 549 

0 errors detected
2 warnings detected
