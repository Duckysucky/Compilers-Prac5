  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in VarDeclarations: the contents of [...] or {...} must not be deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019  */
  11 
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16 
  17   const bool
  18     known = true;
  19 
  20   static bool CheckStatementUse = false;
  21   static bool isLoop = false;
  22 
  23   // This next method might better be located in the code generator.  Traditionally
  24   // it has been left in the ATG file, but that might change in future years
  25   //
  26   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  27   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  28   // to know this!
  29 
  30   static string Unescape(string s) {
  31   /* Replaces escape sequences in s by their Unicode values */
  32     StringBuilder buf = new StringBuilder();
  33     int i = 0;
  34     while (i < s.Length) {
  35       if (s[i] == '\\') {
  36         switch (s[i+1]) {
  37           case '\\': buf.Append('\\'); break;
  38           case '\'': buf.Append('\''); break;
  39           case '\"': buf.Append('\"'); break;
  40           case  'r': buf.Append('\r'); break;
  41           case  'n': buf.Append('\n'); break;
  42           case  't': buf.Append('\t'); break;
  43           case  'b': buf.Append('\b'); break;
  44           case  'f': buf.Append('\f'); break;
  45           default:   buf.Append(s[i+1]); break;
  46         }
  47         i += 2;
  48       }
  49       else {
  50         buf.Append(s[i]);
  51         i++;
  52       }
  53     }
  54     return buf.ToString();
  55   } // Unescape
  56 
  57   // the following is global for expediency (fewer parameters needed)
  58 
  59   static Label mainEntryPoint = new Label(!known);
  60 
  61   static bool IsArith(int type) {
  62     return type == Types.intType || type == Types.noType || type == Types.charType;
  63   } // IsArith
  64 
  65   static bool IsBool(int type) {
  66     return type == Types.boolType || type == Types.noType;
  67   } // IsBool
  68 
  69   static bool IsArray(int type) {
  70     return (type % 2) == 1;
  71   } // IsArray
  72 
  73   static bool Compatible(int typeOne, int typeTwo) {
  74   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  75     return    typeOne == typeTwo
  76            || IsArith(typeOne) && IsArith(typeTwo)
  77            || typeOne == Types.noType
  78            || typeTwo == Types.noType
  79            || IsArray(typeOne) && typeTwo == Types.nullType
  80            || IsArray(typeTwo) && typeOne == Types.nullType;
  81   } // Compatible
  82 
  83   static bool Assignable(int typeOne, int typeTwo) {
  84   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  85     return    typeOne == typeTwo
  86            || typeOne == Types.noType
  87            || typeTwo == Types.noType
  88            || IsArray(typeOne) && typeTwo == Types.nullType;
  89   } // Assignable
  90 
  91   static bool IsCall(out DesType des) {
  92   // Used as an LL(1) conflict resolver variable/function name
  93     Entry entry = Table.Find(la.val);
  94     des = new DesType(entry);
  95     return entry.kind == Kinds.Fun;
  96   } // IsCall
  97 
  98 
  99 /* -------------------------------------------------------------------------- */
 100 
 101 CHARACTERS
 102   lf         = CHR(10) .
 103   backslash  = CHR(92) .
 104   control    = CHR(0) .. CHR(31) .
 105   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 106   digit      = "0123456789" .
 107   stringCh   = ANY - '"' - control - backslash .
 108   charCh     = ANY - "'" - control - backslash .
 109   printable  = ANY - control .
 110 
 111 TOKENS
 112   identifier = letter { { "_" } (letter | digit) } .
 113   number     = digit { digit } .
 114   stringLit  = '"' { stringCh | backslash printable } '"' .
 115   charLit    = "'" ( charCh   | backslash printable ) "'" .
 116 
 117 PRAGMAS
 118   DebugOn     = "$D+" .                      (. debug = true; .)
 119   DebugOff    = "$D-" .                      (. debug = false; .)
 120   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 121   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 122   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 123 
 124 COMMENTS FROM "//" TO lf
 125 COMMENTS FROM "/*" TO "*/"
 126 
 127 IGNORE CHR(9) .. CHR(13)
 128 
 129 PRODUCTIONS
 130 
 131   Parva
 132                              (. CodeGen.FrameHeader();
 133 					     // no arguments
 134                                 CodeGen.Call(mainEntryPoint);
 135 						// forward, incomplete
 136                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 137   = {   FuncDeclaration } EOF  (. if 
 138 						(!mainEntryPoint.IsDefined())
 139                          SemError("missing Main function"); .)
 140   .
 141 
 142   FuncDeclaration
 143                        (. StackFrame frame = new StackFrame();
 144                           Entry function = new Entry(); .)
 145   =  "void" Ident<out function.name>  
 146 					(. function.kind = Kinds.Fun;
 147                               function.type = Types.voidType;
 148                               function.nParams = 0;
 149                               function.firstParam = null;
 150 	                  function.entryPoint = new Label(known);
 151                               Table.Insert(function);
 152                               Table.OpenScope(); .)
 153      "(" FormalParameters<function> ")"      
 154 				(. frame.size = CodeGen.headerSize + 
 155 					function.nParams;
 156                    if (function.name.ToUpper().Equals("MAIN")
 157                        && !mainEntryPoint.IsDefined()
 158                        && function.nParams == 0) {
 159                            mainEntryPoint.Here(); } .)
 160      Body<frame>              (. Table.CloseScope(); .)
 161   .
 162 
 163   FormalParameters<Entry func>  (. Entry param; .)
 164   = [ OneParam<out param, func> (. func.firstParam = param; .)
 165       { WEAK "," OneParam<out param, func> }
 166     ] .
 167 
 168   OneParam<out Entry param, Entry func>
 169 					(. param = new Entry();
 170                              param.kind = Kinds.Var;
 171            param.offset = CodeGen.headerSize + func.nParams;
 172                              func.nParams++; .)
 173   =  Type<out param.type>
 174      Ident<out param.name>         (. Table.Insert(param); .)
 175   .
 176 
 177   Body<StackFrame frame>       (. Label DSPLabel = new Label(known);
 178                                                 int sizeMark = frame.size;
 179                                                 CodeGen.OpenStackFrame(0); .)
 180   =  "{" { Statement<frame> }
 181      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 182                                                 CodeGen.LeaveVoidFunction();
 183                                               .) 
 184 .
 185 
 186   Statement<StackFrame frame> 
 187   =  SYNC (   Block<frame> (. if (CheckStatementUse == false) 
 188                                                 {
 189                                                  Warning("Empty body.");
 190                                                 }
 191                                               .)
 192             | ConstDeclarations (. CheckStatementUse = true; .)
 193             | VarDeclarations<frame> (. CheckStatementUse = true; .)
 194             | AssignmentOrCall (. CheckStatementUse = true; .)
 195             | IfStatement<frame> 
 196             | WhileStatement<frame> 
 197             | DoWhile<frame>
 198             | BreakStatement (. CheckStatementUse = true; if(isLoop == false) {Warning("BreakStatement used in an incorrect statement");} .)
 199             | HaltStatement (. CheckStatementUse = true; .)
 200             | ReturnStatement (. CheckStatementUse = true; .)
 201             | ReadStatement (. CheckStatementUse = true; .)
 202             | WriteStatement (. CheckStatementUse = true; .)
 203             | ";" (. .)
 204           ) .
 205 
 206 
 207   Block<StackFrame frame>
 208   =    (. CheckStatementUse = false; .)                                      (. Table.OpenScope(); .)
 209      "{" { Statement<frame> }                
 210      WEAK "}"                                (. Table.CloseScope(); .)
 211   .
 212 
 213   ConstDeclarations
 214   = "const" OneConst { WEAK "," OneConst }
 215     WEAK ";"
 216   .
 217 
 218   OneConst                                   (. Entry constant = new Entry();
 219                                                 ConstRec con; .)
 220   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 221      AssignOp Constant<out con>              (. constant.value = con.value;
 222                                                 constant.type = con.type;
 223                                                 Table.Insert(constant); .)
 224   .
 225 
 226   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 227   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 228     | CharConst<out con.value>               (. con.type = Types.charType; .)
 229     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 230     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 231     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 232   .
 233 
 234   VarDeclarations<StackFrame frame>          (. int type; .)
 235   =  Type<out type>                          
 236      VarList<frame, type> []
 237      WEAK ";"
 238   .
 239 
 240   Type<out int type>                         
 241   =   BasicType<out type>
 242        [ "[]"                                (. type++; .)
 243        ] .
 244 
 245   BasicType<out int type>                    (. type = Types.noType; .)
 246   =   "int"                                  (. type = Types.intType; .)
 247     | "bool"                                 (. type = Types.boolType; .)
 248     | "char"                                 (. type = Types.charType; .)
 249   .
 250 
 251 
 252   VarList<StackFrame frame, int type>
 253   =  OneVar<frame, type>
 254      { WEAK "," OneVar<frame, type> }
 255   .
 256 
 257   OneVar<StackFrame frame, int type>         (. int expType;
 258                                                 Entry var = new Entry(); .)
 259   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 260                                                 var.type = type;
 261                                                 var.offset = frame.size;
 262                                                 frame.size++; .)
 263      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 264        Expression<out expType>               (. if (!Assignable(var.type, expType))
 265                                                   SemError("incompatible types in assignment");
 266                                                 CodeGen.Assign(var.type); .)
 267      ]                                       (. Table.Insert(var); .)
 268   .
 269 
 270 
 271   AssignmentOrCall                           (. int expType;
 272                                                 DesType des; .)
 273   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 274          identifier                          (. CodeGen.FrameHeader(); .)
 275          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 276       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 277                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 278          AssignOp
 279          Expression<out expType>             (. if (!Assignable(des.type, expType))
 280                                                 SemError("incompatible types in assignment");
 281                                                 CodeGen.Assign(des.type); .)
 282      ) WEAK ";"
 283   .
 284 
 285   Arguments<DesType des>                     (. int argCount = 0;
 286                                                 Entry fp = des.entry.firstParam; .)
 287   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 288        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 289        }
 290      ]                                       (. if (argCount != des.entry.nParams)
 291                                                   SemError("wrong number of arguments"); .)
 292   .
 293 
 294   OneArg<Entry fp>                           (. int argType; .)
 295   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 296                                                     SemError("argument type mismatch"); .)
 297      )
 298   .
 299 
 300   Designator<out DesType des>                (. string name;
 301                                                 int indexType; .)
 302   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 303                                                 if (!entry.declared)
 304                                                   SemError("undeclared identifier");
 305                                                 des = new DesType(entry);
 306                                                 if (entry.kind == Kinds.Var)
 307                                                   CodeGen.LoadAddress(entry); .)
 308      [     "["                               (. if (IsArray(des.type)) des.type--;
 309                                                 else SemError("unexpected subscript");
 310                                                 if (des.entry.kind != Kinds.Var)
 311                                                   SemError("unexpected subscript");
 312                                                 CodeGen.Dereference(); .)
 313               Expression<out indexType>      (. if (!IsArith(indexType))
 314                                                   SemError("invalid subscript type");
 315                                                 CodeGen.Index(); .)
 316 
 317            "]"
 318      ]
 319   .
 320 
 321   IfStatement<StackFrame frame>
 322                                              (. Label falseLabel = new Label(!known); .)
 323   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 324       Statement<frame>                        (. falseLabel.Here();.)
 325         [ "else" Statement<frame>]
 326   .
 327 
 328 
 329   DoWhile<StackFrame frame>
 330     = "do" (. isLoop = true; .) Block<frame> (. isLoop = false; .) "while" "(" Condition ")" 
 331 
 332   .
 333 
 334   WhileStatement<StackFrame frame>
 335                                              (. Label loopExit  = new Label(!known);
 336                                                 Label loopStart = new Label(known); .)
 337   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 338      (. isLoop = true; .) Statement<frame>    (.  isLoop = false;
 339                                                if(token.val == ";")    
 340                                                    {
 341                                                 Warning("Can not have an empty statement.");
 342                                               }
 343                                              CodeGen.Branch(loopStart);
 344                                               loopExit.Here(); .)
 345   .
 346 
 347   HaltStatement
 348   =  "halt" ["("stringLit (. CodeGen.WriteString(token.val); .) ")"]                                 (. CodeGen.LeaveProgram();  .)
 349      WEAK ";"
 350   .
 351 
 352   BreakStatement
 353   =  "break" WEAK ";"   
 354   .
 355 
 356   ReturnStatement              
 357   =  "return"				(. CodeGen.LeaveVoidFunction(); .)
 358     WEAK ";"
 359   .
 360 
 361   ReadStatement
 362   = (   "read"     "("   ReadList   ")"      
 363       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 364     )
 365     WEAK ";"
 366   .
 367 
 368   ReadList
 369   = ReadElement { WEAK "," ReadElement }
 370   .
 371 
 372   ReadElement                                (. string str; DesType des; char ch;.)
 373 
 374   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 375     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 376                                                   SemError("wrong kind of identifier");
 377                                                 switch (des.type) {
 378                                                   case Types.intType:
 379                                                   case Types.boolType:
 380                                                   case Types.charType:
 381                                                     CodeGen.Read(des.type); break;
 382                                                   default:
 383                                                     SemError("cannot read this type"); break;
 384                                                 } .)
 385   .
 386 
 387   WriteStatement
 388   = (   "write"     "("   WriteList   ")"
 389       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 390     )
 391     WEAK ";"
 392   .
 393 
 394   WriteList
 395   = WriteElement { WEAK "," WriteElement }
 396   .
 397 
 398   WriteElement                               (. int expType; string str; string concatStr = ""; .)
 399   =  StringConst<out str> { StringConst<out concatStr> }     (. CodeGen.WriteString(str+concatStr); .)
 400     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType))
 401                                                   SemError("cannot write this type");
 402                                                 switch (expType) {
 403                                                   case Types.intType:
 404                                                   case Types.boolType:
 405                                                   case Types.charType:
 406                                                     CodeGen.Write(expType); break;
 407                                                   default:
 408                                                     break;
 409                                                 } .)
 410   .
 411 
 412   Condition                                  (. int type; .)
 413   =  Expression<out type>                    (. if (!IsBool(type))
 414                                                   SemError("Boolean expression needed"); .)
 415   .
 416 
 417   Expression<out int type>                   (. int type2;
 418                                                 int op;
 419                                                 bool comparable; .)
 420   =  AddExp<out type>
 421      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 422                                                   case CodeGen.ceq: case CodeGen.cne:
 423                                                     comparable = Compatible(type, type2);
 424                                                     break;
 425                                                   default:
 426                                                     comparable = IsArith(type) && IsArith(type2);
 427                                                     break;
 428                                                 }
 429                                                 if (!comparable)
 430                                                   SemError("incomparable operands");
 431                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 432      ]
 433   .
 434 
 435   AddExp<out int type>                       (. int type2;
 436                                                 int op;
 437                                                 Label shortcircuit = new Label(!known); .)
 438   =                                          (. type = Types.noType; .)
 439      (   "+" Term<out type>                  (. if (!IsArith(type))
 440                                                   SemError("arithmetic operand needed"); .)
 441        | "-" Term<out type>                  (. if (!IsArith(type))
 442                                                   SemError("arithmetic operand needed");
 443                                                 CodeGen.NegateInteger(); .)
 444        | Term<out type>
 445      )
 446      { AddOp<out op>                         (. if (op == CodeGen.or)
 447                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 448        Term<out type2>                       (. switch (op) {
 449                                                   case CodeGen.or:
 450                                                     if (!IsBool(type) || !IsBool(type2))
 451                                                       SemError("boolean operands needed");
 452                                                     type = Types.boolType;
 453                                                     break;
 454                                                   default:
 455                                                     if (!IsArith(type) || !IsArith(type2)) {
 456                                                       SemError("arithmetic operands needed");
 457                                                       type = Types.noType;
 458                                                     }
 459                                                     CodeGen.BinaryOp(op);
 460                                                     break;
 461                                                 } .)
 462      }                                       (. shortcircuit.Here(); .)
 463   .
 464 
 465   Term<out int type>                         (. int type2;
 466                                                 int op;
 467                                                 Label shortcircuit = new Label(!known); .)
 468   =  Factor<out type>
 469      { MulOp<out op>                         (. if (op == CodeGen.and)
 470                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 471        Factor<out type2>                     (. switch (op) {
 472                                                   case CodeGen.and:
 473                                                     if (!IsBool(type) || !IsBool(type2))
 474                                                       SemError("boolean operands needed");
 475                                                     type = Types.boolType;
 476                                                     break;
 477                                                   default:
 478                                                     if (!IsArith(type) || !IsArith(type2)) {
 479                                                       SemError("arithmetic operands needed");
 480                                                       type = Types.noType;
 481                                                     }
 482                                                     CodeGen.BinaryOp(op);
 483                                                     break;
 484                                                 } .)
 485      }                                       (. shortcircuit.Here(); .)
 486   .
 487 
 488   Factor<out int type>                       (. type = Types.noType;
 489                                                 int size;
 490                                                 DesType des;
 491                                                 ConstRec con; .)
 492   =    Designator<out des>                 (. type = des.type;
 493                                               switch (des.entry.kind) {
 494                                                   case Kinds.Var:
 495                                                     CodeGen.Dereference();
 496                                                     break;
 497                                                   case Kinds.Con:
 498                                                     CodeGen.LoadConstant(des.entry.value);
 499                                                     break;
 500                                                   default:
 501                                                     SemError("wrong kind of identifier");
 502                                                     break;
 503                                                 } .)
 504                                         
 505      | Constant<out con>                     (. type = con.type;
 506                                                 CodeGen.LoadConstant(con.value); .)
 507      | "new" BasicType<out type>             (. type++; .)
 508          "[" Expression<out size>            (. if (!IsArith(size))
 509                                                   SemError("array size must be integer");
 510                                                 CodeGen.Allocate(); .)
 511          "]"
 512      | "!" Factor<out type>                  (. if (!IsBool(type)) SemError("boolean operand needed");
 513                                                 else CodeGen.NegateBoolean();
 514                                                 type = Types.boolType; .)
 515      | "(" Expression<out type> ")"
 516   .
 517 
 518   AddOp<out int op>                          (. op = CodeGen.nop; .)
 519   =    "+"                                   (. op = CodeGen.add; .)
 520      | "-"                                   (. op = CodeGen.sub; .)
 521      | "||"                                  (. op = CodeGen.or;  .)
 522   .
 523 
 524   MulOp<out int op>                          (. op = CodeGen.nop; .)
 525   =    "*"                                   (. op = CodeGen.mul; .)
 526      | "/"                                   (. op = CodeGen.div; .)
 527      | "%"                                   (. op = CodeGen.rem; .)
 528      | "&&"                                  (. op = CodeGen.and; .)
 529   .
 530 
 531   RelOp<out int op>                          (. op = CodeGen.nop; .)
 532   =    "=="                                  (. op = CodeGen.ceq; .)
 533      | "!="                                  (. op = CodeGen.cne; .)
 534      | "<"                                   (. op = CodeGen.clt; .)
 535      | "<="                                  (. op = CodeGen.cle; .)
 536      | ">"                                   (. op = CodeGen.cgt; .)
 537      | ">="                                  (. op = CodeGen.cge; .)
 538   .
 539 
 540   AssignOp = "=" .
 541 
 542   Ident<out string name>
 543   =  identifier                              (. name = token.val; .)
 544   .
 545 
 546   StringConst<out string str>
 547   =  stringLit                               (. str = token.val;
 548                                                 str = Unescape(str.Substring(1, str.Length - 2)); .)
 549   .
 550 
 551   CharConst<out int value>
 552   =  charLit                                 (. string str = token.val ;
 553                                                 str = Unescape(str.Substring(1, str.Length - 2));
 554                                                 value = str[0]; .)
 555   .
 556 
 557   IntConst<out int value>
 558   =  number                                  (. try {
 559                                                   value = Convert.ToInt32(token.val);
 560                                                 } catch (Exception) {
 561                                                   value = 0; SemError("number out of range");
 562                                                 } .)
 563   .
 564 
 565 END Parva.
 566 

0 errors detected
4 warnings detected
