
   1 using Library;
   2 
   3 COMPILER Calc $NC
   4 //  Put your names and a description here
   5 
   6 static int ToInt(bool b) {
   7 // return 0 or 1 according as b is false or true
   8   return b ? 1 : 0;
   9 } // ToInt
  10 
  11 static string Variable_Val = "";
  12 
  13 static bool ToBool(int i) {
  14 // return false or true according as i is 0 or 1
  15   return i == 0 ? false : true;
  16 } // ToBool
  17 
  18 const int         
  19    noType   = 0,         
  20    intType  = 1,         
  21    boolType = 2; 
  22  
  23 static int checkType= 0;
  24 static int save =  0;
  25 // List keeps track of the symbol table
  26 
  27 
  28 CHARACTERS
  29   digit      = "0123456789" .
  30   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  31 
  32 TOKENS
  33   number     = digit { digit } .
  34   identifier = letter { letter | digit } .
  35 
  36 IGNORE CHR(0) .. CHR(31)
  37 
  38 PRODUCTIONS
  39   Calc                                      (. int calConstValue; .)
  40   =                                         (. Table.ClearTable(); .)
  41   { Print<out calConstValue>
  42   | Assignment<out calConstValue>
  43   } "quit"
  44                                             (. Table.PrintTable(); .) 
  45   .
  46 
  47   Assignment<out int AssignConst>            
  48   =
  49   Variable                                  (. Variable_Val = token.val; .)                                              
  50   "="
  51   Expression<out AssignConst>               (. Table.AddRef(Variable_Val, true, AssignConst); .)            
  52   SYNC ";"
  53   .
  54 
  55   Print<out int printConst>                 (. int printAlsoConst; .)              
  56   =
  57   "print"
  58   Expression<out printConst>              
  59   { WEAK ","
  60     Expression<out printAlsoConst>                
  61   }
  62   SYNC ";"
  63   .
  64 
  65   Expression<out int ExprValue>             (. int ExprAlsoValue; ExprValue = 0; .)        
  66   =                         
  67   AndExp<out ExprValue> 
  68   { "||"                                    (. save = checkType;  .)
  69     AndExp<out ExprAlsoValue>             
  70                                             (.  if(checkType == noType && save ==noType) { }
  71                                                 else if(checkType == boolType && save == boolType){ 
  72                                                   if(ToBool(ExprValue)) ExprValue = 1;
  73                                                   else{
  74                                                     ExprValue = ExprAlsoValue;
  75                                                   }
  76                                                 }
  77                                                 else{
  78                                                   IO.WriteLine("Error !! Mixed Type 1");
  79                                                 }
  80                                             .)        
  81   } .
  82 
  83   AndExp<out int andExpConst>               (. int andExpAlsoConst; andExpConst = 0; .)               
  84   = 
  85   EqlExp<out andExpConst>                   
  86   {                                         (. save = checkType;  .) 
  87     "&&"  
  88     EqlExp<out andExpAlsoConst>                   
  89                                             (. 
  90                                               if(checkType == noType && save == noType) { }
  91                                               else if(checkType == boolType && save == boolType){
  92                                                 if(!ToBool(andExpConst)) andExpConst = 0;
  93                                                 else if (ToBool(andExpAlsoConst)){
  94                                                   andExpConst = andExpAlsoConst;
  95                                                 }
  96                                                 else{
  97                                                   andExpConst = 0;
  98                                                 }
  99                                               }
 100                                               else{
 101                                                   IO.WriteLine("Error !! Mixed Type 1");
 102                                               }
 103                                             .)         
 104   } .
 105 
 106   EqlExp<out int equalExpConst>             (. int equalExpAlsoConst; string combool ;.)           
 107   =
 108   RelExp<out equalExpConst>                 (. save = checkType; .)
 109   { EqlOp <out combool>
 110     RelExp<out equalExpAlsoConst>           (.   if((checkType == boolType && save == boolType) || (checkType == noType && save == noType) ) {
 111                                                     if(combool =="Eq"){equalExpConst = ToInt(equalExpConst ==equalExpAlsoConst);}
 112                                                     if(combool =="NotEq"){equalExpConst = ToInt(equalExpAlsoConst != equalExpAlsoConst) ;}
 113                                                     }else
 114                                                     {
 115                                                       IO.WriteLine("Error !! Mixed Type 1");
 116                                                     }
 117                                             .)
 118   } .
 119 
 120   RelExp<out int relExpConst>               (. int relExpAlsoConst; string Comp;.)           
 121   =                                          
 122   AddExp<out relExpConst>
 123   [ RelOp <out Comp>
 124     AddExp<out relExpAlsoConst>             (. if(checkType == boolType) 
 125                                                 {
 126                                                   if(Comp=="LT"){relExpConst =ToInt(relExpConst < relExpAlsoConst) ;} 
 127                                                   if(Comp=="LE"){relExpConst = ToInt(relExpConst <= relExpAlsoConst) ;} 
 128                                                   if(Comp=="GT"){relExpConst = ToInt(relExpConst > relExpAlsoConst) ;}
 129                                                   if(Comp=="GE"){relExpConst = ToInt(relExpConst >= relExpAlsoConst) ;} 
 130                                                 }
 131                                                 else{
 132                                                   IO.WriteLine("Error!! Type Mix ");
 133                                                 }
 134                                             .)
 135   ] .
 136 
 137   AddExp<out int addExpConst>               (. int addExpAlsoConst; string Ad_Mn; .)               
 138   =
 139   MultExp<out addExpConst>
 140   { AddOp <out Ad_Mn>
 141     MultExp<out addExpAlsoConst>            (. if(checkType == noType){
 142                                               if(checkType == noType)
 143                                               if(Ad_Mn == "ADD"){addExpConst = addExpConst + addExpAlsoConst; } 
 144                                               if(Ad_Mn == "MIN"){addExpConst = addExpConst - addExpAlsoConst; } 
 145                                                 }
 146                                                 else{
 147                                                   IO.WriteLine("Error!! Type Mix");
 148                                                 }
 149                                             .)
 150   } .
 151 
 152   MultExp<out int multValue>                
 153   =
 154   UnaryExp<out multValue>                   (. int multAlsoValue; string Opt; .)
 155   { MulOp <out Opt>
 156     UnaryExp<out multAlsoValue>             (. if(checkType ==noType){
 157                                                   if(Opt == "mul"){ multValue = multValue * multAlsoValue;} 
 158                                                   if(Opt == "div") {
 159                                                     if(multAlsoValue != 0) multValue = multValue / multAlsoValue;
 160                                                     else IO.WriteLine("Error !! Tried to divide by zero!");
 161                                                   }
 162                                                   if(Opt == "mod") {multValue = multValue % multAlsoValue;}
 163                                                   }
 164                                                   else {
 165                                                     IO.WriteLine("Error!! Type Mix");
 166                                                   }
 167                                             .)                                     
 168   } .
 169 
 170   UnaryExp<out int UnaryValue>              (. UnaryValue = 0; .)  
 171   =   Factor<out UnaryValue>
 172     | "+" UnaryExp<out UnaryValue>
 173     | "-" UnaryExp<out UnaryValue>
 174     | "!" UnaryExp<out UnaryValue>          (. if(checkType == boolType)
 175                                                   {
 176                                                     if (UnaryValue == 1)
 177                                                       {UnaryValue =0;} 
 178                                                     else{ UnaryValue = 1; }
 179                                                   } 
 180                                                   else {
 181                                                       IO.WriteLine("Error!! Type Mix");
 182                                                     }
 183                                             .)
 184   .
 185 
 186   Factor<out int factorNum>                 (. factorNum = 0; .)           
 187   =
 188       Variable                              (. factorNum = Table.Retrieve(token.val); .)
 189     | Number                                (. factorNum = Convert.ToInt32(token.val); checkType =noType; .)
 190     | "true"                                (. factorNum = ToInt(true); checkType = boolType ; .)
 191     | "false"                               (. factorNum = ToInt(false); checkType = boolType ; .)
 192     | "(" Expression<out factorNum>
 193       ")"
 194   .
 195 
 196   Variable
 197   =
 198   identifier                          
 199   .
 200 
 201   Number
 202   =
 203   number                              
 204   .
 205 
 206   MulOp <out string op>                     (. op = ""; .)
 207   =
 208       "*"                                   (. op = "mul"; .)
 209     | "/"                                   (. op = "div";.)
 210     | "%"                                   (. op = "mod";.)
 211     .
 212 
 213   AddOp  <out string opet>                  (. opet = ""; .)
 214   = 
 215       "+"                                   (. opet = "ADD"; .)
 216     | "-"                                   (. opet = "MIN"; .)
 217   .
 218 
 219   RelOp <out string compare>                (. compare = ""; .)
 220   =  
 221       "<"                                   (.  compare = "LT"; .)
 222     | "<="                                  (.  compare = "LE";  .)
 223     | ">"                                   (.  compare = "GT";  .)
 224     | ">="                                  (.  compare = "GE";  .)
 225   .
 226 
 227   EqlOp <out string bools>                  (. bools = ""; .)
 228   =  
 229       "=="                                  (. bools = "Eq"; .)
 230     | "!="                                  (. bools = "NotEq"; .)
 231   .
 232 
 233 END Calc.

0 errors detected
