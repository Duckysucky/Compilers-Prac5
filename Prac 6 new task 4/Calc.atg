using Library;

COMPILER Calc $NC
//  Put your names and a description here

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static string Variable_Val = "";

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

const int         
   noType   = 0,         
   intType  = 1,         
   boolType = 2; 
 
static int checkType= 0;
static int save =  0;
// List keeps track of the symbol table


CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .

TOKENS
  number     = digit { digit } .
  identifier = letter { letter | digit } .

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Calc                                      (. int calConstValue; .)
  =                                         (. Table.ClearTable(); .)
  { Print<out calConstValue>
  | Assignment<out calConstValue>
  } "quit"
                                            (. Table.PrintTable(); .) 
  .

  Assignment<out int AssignConst>            
  =
  Variable                                  (. Variable_Val = token.val; .)                                              
  "="
  Expression<out AssignConst>               (. Table.AddRef(Variable_Val, true, AssignConst); .)            
  SYNC ";"
  .

  Print<out int printConst>                 (. int printAlsoConst; .)              
  =
  "print"
  Expression<out printConst>              
  { WEAK ","
    Expression<out printAlsoConst>                
  }
  SYNC ";"
  .

  Expression<out int ExprValue>             (. int ExprAlsoValue; ExprValue = 0; .)        
  =                         
  AndExp<out ExprValue> 
  { "||"                                    (. save = checkType;  .)
    AndExp<out ExprAlsoValue>             
                                            (.  if(checkType == noType && save ==noType) { }
                                                else if(checkType == boolType && save == boolType){ 
                                                  if(ToBool(ExprValue)) ExprValue = 1;
                                                  else{
                                                    ExprValue = ExprAlsoValue;
                                                  }
                                                }
                                                else{
                                                  IO.WriteLine("Error !! Mixed Type 1");
                                                }
                                            .)        
  } .

  AndExp<out int andExpConst>               (. int andExpAlsoConst; andExpConst = 0; .)               
  = 
  EqlExp<out andExpConst>                   
  {                                         (. save = checkType;  .) 
    "&&"  
    EqlExp<out andExpAlsoConst>                   
                                            (. 
                                              if(checkType == noType && save == noType) { }
                                              else if(checkType == boolType && save == boolType){
                                                if(!ToBool(andExpConst)) andExpConst = 0;
                                                else if (ToBool(andExpAlsoConst)){
                                                  andExpConst = andExpAlsoConst;
                                                }
                                                else{
                                                  andExpConst = 0;
                                                }
                                              }
                                              else{
                                                  IO.WriteLine("Error !! Mixed Type 1");
                                              }
                                            .)         
  } .

  EqlExp<out int equalExpConst>             (. int equalExpAlsoConst; string combool ;.)           
  =
  RelExp<out equalExpConst>                 (. save = checkType; .)
  { EqlOp <out combool>
    RelExp<out equalExpAlsoConst>           (.   if((checkType == boolType && save == boolType) || (checkType == noType && save == noType) ) {
                                                    if(combool =="Eq"){equalExpConst = ToInt(equalExpConst ==equalExpAlsoConst);}
                                                    if(combool =="NotEq"){equalExpConst = ToInt(equalExpAlsoConst != equalExpAlsoConst) ;}
                                                    }else
                                                    {
                                                      IO.WriteLine("Error !! Mixed Type 1");
                                                    }
                                            .)
  } .

  RelExp<out int relExpConst>               (. int relExpAlsoConst; string Comp;.)           
  =                                          
  AddExp<out relExpConst>
  [ RelOp <out Comp>
    AddExp<out relExpAlsoConst>             (. if(checkType == boolType) 
                                                {
                                                  if(Comp=="LT"){relExpConst =ToInt(relExpConst < relExpAlsoConst) ;} 
                                                  if(Comp=="LE"){relExpConst = ToInt(relExpConst <= relExpAlsoConst) ;} 
                                                  if(Comp=="GT"){relExpConst = ToInt(relExpConst > relExpAlsoConst) ;}
                                                  if(Comp=="GE"){relExpConst = ToInt(relExpConst >= relExpAlsoConst) ;} 
                                                }
                                                else{
                                                  IO.WriteLine("Error!! Type Mix ");
                                                }
                                            .)
  ] .

  AddExp<out int addExpConst>               (. int addExpAlsoConst; string Ad_Mn; .)               
  =
  MultExp<out addExpConst>
  { AddOp <out Ad_Mn>
    MultExp<out addExpAlsoConst>            (. if(checkType == noType){
                                              if(checkType == noType)
                                              if(Ad_Mn == "ADD"){addExpConst = addExpConst + addExpAlsoConst; } 
                                              if(Ad_Mn == "MIN"){addExpConst = addExpConst - addExpAlsoConst; } 
                                                }
                                                else{
                                                  IO.WriteLine("Error!! Type Mix");
                                                }
                                            .)
  } .

  MultExp<out int multValue>                
  =
  UnaryExp<out multValue>                   (. int multAlsoValue; string Opt; .)
  { MulOp <out Opt>
    UnaryExp<out multAlsoValue>             (. if(checkType ==noType){
                                                  if(Opt == "mul"){ multValue = multValue * multAlsoValue;} 
                                                  if(Opt == "div") {
                                                    if(multAlsoValue != 0) multValue = multValue / multAlsoValue;
                                                    else IO.WriteLine("Error !! Tried to divide by zero!");
                                                  }
                                                  if(Opt == "mod") {multValue = multValue % multAlsoValue;}
                                                  }
                                                  else {
                                                    IO.WriteLine("Error!! Type Mix");
                                                  }
                                            .)                                     
  } .

  UnaryExp<out int UnaryValue>              (. UnaryValue = 0; .)  
  =   Factor<out UnaryValue>
    | "+" UnaryExp<out UnaryValue>
    | "-" UnaryExp<out UnaryValue>
    | "!" UnaryExp<out UnaryValue>          (. if(checkType == boolType)
                                                  {
                                                    if (UnaryValue == 1)
                                                      {UnaryValue =0;} 
                                                    else{ UnaryValue = 1; }
                                                  } 
                                                  else {
                                                      IO.WriteLine("Error!! Type Mix");
                                                    }
                                            .)
  .

  Factor<out int factorNum>                 (. factorNum = 0; .)           
  =
      Variable                              (. factorNum = Table.Retrieve(token.val); .)
    | Number                                (. factorNum = Convert.ToInt32(token.val); checkType =noType; .)
    | "true"                                (. factorNum = ToInt(true); checkType = boolType ; .)
    | "false"                               (. factorNum = ToInt(false); checkType = boolType ; .)
    | "(" Expression<out factorNum>
      ")"
  .

  Variable
  =
  identifier                          
  .

  Number
  =
  number                              
  .

  MulOp <out string op>                     (. op = ""; .)
  =
      "*"                                   (. op = "mul"; .)
    | "/"                                   (. op = "div";.)
    | "%"                                   (. op = "mod";.)
    .

  AddOp  <out string opet>                  (. opet = ""; .)
  = 
      "+"                                   (. opet = "ADD"; .)
    | "-"                                   (. opet = "MIN"; .)
  .

  RelOp <out string compare>                (. compare = ""; .)
  =  
      "<"                                   (.  compare = "LT"; .)
    | "<="                                  (.  compare = "LE";  .)
    | ">"                                   (.  compare = "GT";  .)
    | ">="                                  (.  compare = "GE";  .)
  .

  EqlOp <out string bools>                  (. bools = ""; .)
  =  
      "=="                                  (. bools = "Eq"; .)
    | "!="                                  (. bools = "NotEq"; .)
  .

END Calc.
